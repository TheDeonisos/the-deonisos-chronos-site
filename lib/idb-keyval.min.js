
/*! idb-keyval - MIT License - https://github.com/jakearchibald/idb-keyval */
(function() {
  'use strict';
  function promisifyRequest(request) {
    return new Promise((resolve, reject) => {
      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }
  function createStore(dbName, storeName) {
    const req = indexedDB.open(dbName);
    req.onupgradeneeded = () => req.result.createObjectStore(storeName);
    const dbp = new Promise((resolve, reject) => {
      req.onsuccess = () => resolve(req.result);
      req.onerror = () => reject(req.error);
    });
    return (txMode, callback) =>
      dbp.then(db => callback(db.transaction(storeName, txMode).objectStore(storeName)));
  }
  let defaultGetStoreFunc = createStore('deonisos-db', 'store');
  function get(key, customStore = defaultGetStoreFunc) {
    return customStore('readonly', store => new Promise((resolve, reject) => {
      const r = store.get(key);
      r.onsuccess = () => resolve(r.result);
      r.onerror = () => reject(r.error);
    }));
  }
  function set(key, value, customStore = defaultGetStoreFunc) {
    return customStore('readwrite', store => new Promise((resolve, reject) => {
      store.put(value, key);
      store.transaction.oncomplete = () => resolve();
      store.transaction.onerror = () => reject(store.transaction.error);
    }));
  }
  function del(key, customStore = defaultGetStoreFunc) {
    return customStore('readwrite', store => new Promise((resolve, reject) => {
      store.delete(key);
      store.transaction.oncomplete = () => resolve();
      store.transaction.onerror = () => reject(store.transaction.error);
    }));
  }
  function keys(customStore = defaultGetStoreFunc) {
    return customStore('readonly', store => new Promise((resolve, reject) => {
      const r = store.getAllKeys();
      r.onsuccess = () => resolve(r.result);
      r.onerror = () => reject(r.error);
    }));
  }
  window.IDBKV = { get, set, del, keys };
})();
